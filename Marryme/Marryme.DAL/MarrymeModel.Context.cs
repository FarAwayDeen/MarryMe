//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marryme.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarrymeEntities : DbContext
    {
        public MarrymeEntities()
            : base("name=MarrymeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcceptanceCriteria> AcceptanceCriterias { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<AdminProfile> AdminProfiles { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<Attachement> Attachements { get; set; }
        public virtual DbSet<ChatFriendRequest> ChatFriendRequests { get; set; }
        public virtual DbSet<ChatHistoryDeletedMember> ChatHistoryDeletedMembers { get; set; }
        public virtual DbSet<ChatMessage> ChatMessages { get; set; }
        public virtual DbSet<ChatSession> ChatSessions { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ContactU> ContactUs { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CR_List> CR_List { get; set; }
        public virtual DbSet<CR_ListType> CR_ListType { get; set; }
        public virtual DbSet<Divorce> Divorces { get; set; }
        public virtual DbSet<DivorcePolicy> DivorcePolicies { get; set; }
        public virtual DbSet<DocDropdownList> DocDropdownLists { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<EductionLevel> EductionLevels { get; set; }
        public virtual DbSet<EmailSMSTemplate> EmailSMSTemplates { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ExisitingKidsDetail> ExisitingKidsDetails { get; set; }
        public virtual DbSet<ExisitingKidsDetailResult> ExisitingKidsDetailResults { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<FacilitiesResultFemale> FacilitiesResultFemales { get; set; }
        public virtual DbSet<FacilitiesResultMale> FacilitiesResultMales { get; set; }
        public virtual DbSet<FamilyInvolvement> FamilyInvolvements { get; set; }
        public virtual DbSet<FamilyInvolvementResult> FamilyInvolvementResults { get; set; }
        public virtual DbSet<FeedBack> FeedBacks { get; set; }
        public virtual DbSet<FieldsPermission> FieldsPermissions { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<MarriageDuration> MarriageDurations { get; set; }
        public virtual DbSet<MarriagePolicy> MarriagePolicies { get; set; }
        public virtual DbSet<MemberAppearance> MemberAppearances { get; set; }
        public virtual DbSet<MemberEducationDetail> MemberEducationDetails { get; set; }
        public virtual DbSet<MemberFamilyDetail> MemberFamilyDetails { get; set; }
        public virtual DbSet<MemberLanguage> MemberLanguages { get; set; }
        public virtual DbSet<MemberLifeStyle> MemberLifeStyles { get; set; }
        public virtual DbSet<MemberLikeDislike> MemberLikeDislikes { get; set; }
        public virtual DbSet<MemberLocationDetail> MemberLocationDetails { get; set; }
        public virtual DbSet<MemberLoginDetail> MemberLoginDetails { get; set; }
        public virtual DbSet<MemberPackageConfirmPayment> MemberPackageConfirmPayments { get; set; }
        public virtual DbSet<MemberPackagePayment> MemberPackagePayments { get; set; }
        public virtual DbSet<MemberPackageSubscription> MemberPackageSubscriptions { get; set; }
        public virtual DbSet<MemberPackageSubscriptionDetail> MemberPackageSubscriptionDetails { get; set; }
        public virtual DbSet<MemberPreferrdLocation> MemberPreferrdLocations { get; set; }
        public virtual DbSet<MemberRegistration> MemberRegistrations { get; set; }
        public virtual DbSet<MemberReligiousDetail> MemberReligiousDetails { get; set; }
        public virtual DbSet<MenCurrentState> MenCurrentStates { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NumberOfMarriage> NumberOfMarriages { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PackagePricingPlan> PackagePricingPlans { get; set; }
        public virtual DbSet<PackageType> PackageTypes { get; set; }
        public virtual DbSet<PageContent> PageContents { get; set; }
        public virtual DbSet<PartnerCatagoryMaritalStatu> PartnerCatagoryMaritalStatus { get; set; }
        public virtual DbSet<PartnerCategory> PartnerCategories { get; set; }
        public virtual DbSet<PartnerCategoryResult> PartnerCategoryResults { get; set; }
        public virtual DbSet<PartnerCatoryEducationLevel> PartnerCatoryEducationLevels { get; set; }
        public virtual DbSet<PaymentOption> PaymentOptions { get; set; }
        public virtual DbSet<ProfileRequirement> ProfileRequirements { get; set; }
        public virtual DbSet<ProposalQuestion> ProposalQuestions { get; set; }
        public virtual DbSet<ProposalQuestionsResult> ProposalQuestionsResults { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<ReligionSect> ReligionSects { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<UploadDocument> UploadDocuments { get; set; }
        public virtual DbSet<WifeDetail> WifeDetails { get; set; }
        public virtual DbSet<WifeDetailResult> WifeDetailResults { get; set; }
        public virtual DbSet<WifeNumber> WifeNumbers { get; set; }
        public virtual DbSet<WomenCurrentState> WomenCurrentStates { get; set; }
        public virtual DbSet<WomenResponsibility> WomenResponsibilities { get; set; }
        public virtual DbSet<WomenRight> WomenRights { get; set; }
        public virtual DbSet<WomenRightsResult> WomenRightsResults { get; set; }
    
        public virtual ObjectResult<AdminReporting_Result> AdminReporting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminReporting_Result>("AdminReporting");
        }
    
        public virtual int DisableCurrentMemberPackageIfExpired(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableCurrentMemberPackageIfExpired", memberIdParameter);
        }
    
        public virtual int FetchAstroMatches(string star, string raashi, string gothra, string dosham, Nullable<int> recordToFetch)
        {
            var starParameter = star != null ?
                new ObjectParameter("star", star) :
                new ObjectParameter("star", typeof(string));
    
            var raashiParameter = raashi != null ?
                new ObjectParameter("raashi", raashi) :
                new ObjectParameter("raashi", typeof(string));
    
            var gothraParameter = gothra != null ?
                new ObjectParameter("gothra", gothra) :
                new ObjectParameter("gothra", typeof(string));
    
            var doshamParameter = dosham != null ?
                new ObjectParameter("dosham", dosham) :
                new ObjectParameter("dosham", typeof(string));
    
            var recordToFetchParameter = recordToFetch.HasValue ?
                new ObjectParameter("RecordToFetch", recordToFetch) :
                new ObjectParameter("RecordToFetch", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchAstroMatches", starParameter, raashiParameter, gothraParameter, doshamParameter, recordToFetchParameter);
        }
    
        public virtual ObjectResult<FetchChatFriendList_Result> FetchChatFriendList(Nullable<long> memberId, string search)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchChatFriendList_Result>("FetchChatFriendList", memberIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchChatMemberConversation_Result> FetchChatMemberConversation(Nullable<long> currentMemberId, Nullable<long> selectedMemberId)
        {
            var currentMemberIdParameter = currentMemberId.HasValue ?
                new ObjectParameter("CurrentMemberId", currentMemberId) :
                new ObjectParameter("CurrentMemberId", typeof(long));
    
            var selectedMemberIdParameter = selectedMemberId.HasValue ?
                new ObjectParameter("SelectedMemberId", selectedMemberId) :
                new ObjectParameter("SelectedMemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchChatMemberConversation_Result>("FetchChatMemberConversation", currentMemberIdParameter, selectedMemberIdParameter);
        }
    
        public virtual ObjectResult<FetchChatMemberList_Result> FetchChatMemberList(Nullable<long> memberId, string search)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchChatMemberList_Result>("FetchChatMemberList", memberIdParameter, searchParameter);
        }
    
        public virtual int FetchCitiesAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchCitiesAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchConfirmPaymentAdminList_Result> FetchConfirmPaymentAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchConfirmPaymentAdminList_Result>("FetchConfirmPaymentAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchConfirmPaymentClientList_Result> FetchConfirmPaymentClientList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active, Nullable<long> memberId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchConfirmPaymentClientList_Result>("FetchConfirmPaymentClientList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<FetchContactUs_Result> FetchContactUs(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchContactUs_Result>("FetchContactUs", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchContactUsNotification_Result> FetchContactUsNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchContactUsNotification_Result>("FetchContactUsNotification");
        }
    
        public virtual int FetchCountriesAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchCountriesAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual int FetchCountryNameByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchCountryNameByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchFeedBack_Result> FetchFeedBack()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFeedBack_Result>("FetchFeedBack");
        }
    
        public virtual ObjectResult<FetchFeedBackAdminList_Result> FetchFeedBackAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFeedBackAdminList_Result>("FetchFeedBackAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchFeedBackNotification_Result> FetchFeedBackNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFeedBackNotification_Result>("FetchFeedBackNotification");
        }
    
        public virtual ObjectResult<FetchLanguages_Result> FetchLanguages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchLanguages_Result>("FetchLanguages");
        }
    
        public virtual int FetchMemberAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchMemberAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchMemberFieldPermission_Result> FetchMemberFieldPermission(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberFieldPermission_Result>("FetchMemberFieldPermission", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMemberSubscription_Result> FetchMemberSubscription(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberSubscription_Result>("FetchMemberSubscription", memberIdParameter);
        }
    
        public virtual int FetchNewlyRegisteredMemberList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchNewlyRegisteredMemberList");
        }
    
        public virtual ObjectResult<FetchOrderSummary_Result> FetchOrderSummary(Nullable<long> packagePricingPlanId)
        {
            var packagePricingPlanIdParameter = packagePricingPlanId.HasValue ?
                new ObjectParameter("PackagePricingPlanId", packagePricingPlanId) :
                new ObjectParameter("PackagePricingPlanId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchOrderSummary_Result>("FetchOrderSummary", packagePricingPlanIdParameter);
        }
    
        public virtual ObjectResult<FetchPackagePricingPlans_Result> FetchPackagePricingPlans(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPackagePricingPlans_Result>("FetchPackagePricingPlans", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchPackages_Result> FetchPackages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPackages_Result>("FetchPackages");
        }
    
        public virtual ObjectResult<FetchPackagesDuration_Result> FetchPackagesDuration(Nullable<int> packageDuration)
        {
            var packageDurationParameter = packageDuration.HasValue ?
                new ObjectParameter("PackageDuration", packageDuration) :
                new ObjectParameter("PackageDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPackagesDuration_Result>("FetchPackagesDuration", packageDurationParameter);
        }
    
        public virtual ObjectResult<FetchPackageSubscription_Result> FetchPackageSubscription(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPackageSubscription_Result>("FetchPackageSubscription", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchPackageType_Result> FetchPackageType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPackageType_Result>("FetchPackageType");
        }
    
        public virtual ObjectResult<FetchPaymentOptionddl_Result> FetchPaymentOptionddl(string paymentType)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPaymentOptionddl_Result>("FetchPaymentOptionddl", paymentTypeParameter);
        }
    
        public virtual ObjectResult<FetchPaymentOptions_Result> FetchPaymentOptions(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPaymentOptions_Result>("FetchPaymentOptions", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchPremiumMember_Result> FetchPremiumMember(string isActive)
        {
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPremiumMember_Result>("FetchPremiumMember", isActiveParameter);
        }
    
        public virtual int FetchStatesAdminList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchStatesAdminList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<GetPackageRemainingWeeksByMemberId_Result> GetPackageRemainingWeeksByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPackageRemainingWeeksByMemberId_Result>("GetPackageRemainingWeeksByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchCountries_Result> FetchCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCountries_Result>("FetchCountries");
        }
    
        public virtual ObjectResult<FetchPremiumBestMatches_Result> FetchPremiumBestMatches(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPremiumBestMatches_Result>("FetchPremiumBestMatches", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchProfileRequirementList_Result> FetchProfileRequirementList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfileRequirementList_Result>("FetchProfileRequirementList");
        }
    
        public virtual ObjectResult<FetchWomanRights_Result> FetchWomanRights()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchWomanRights_Result>("FetchWomanRights");
        }
    
        public virtual ObjectResult<FetchProposalQuestions_Result> FetchProposalQuestions(string questionFor)
        {
            var questionForParameter = questionFor != null ?
                new ObjectParameter("questionFor", questionFor) :
                new ObjectParameter("questionFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProposalQuestions_Result>("FetchProposalQuestions", questionForParameter);
        }
    
        public virtual ObjectResult<FetchParentCatagoryList_Result> FetchParentCatagoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchParentCatagoryList_Result>("FetchParentCatagoryList");
        }
    
        public virtual ObjectResult<FetchFacilitiesByMemberId_Result> FetchFacilitiesByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFacilitiesByMemberId_Result>("FetchFacilitiesByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchProposalQuestionsByMemberId_Result> FetchProposalQuestionsByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProposalQuestionsByMemberId_Result>("FetchProposalQuestionsByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchWomanRightsByMemberId_Result> FetchWomanRightsByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchWomanRightsByMemberId_Result>("FetchWomanRightsByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchPartnerCategoriesByMemberId_Result> FetchPartnerCategoriesByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPartnerCategoriesByMemberId_Result>("FetchPartnerCategoriesByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<MembersFetch_Result> MembersFetch(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<long> sortCol, string sortOrder, string search, string active, Nullable<int> createdBy)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(long));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MembersFetch_Result>("MembersFetch", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<FetchProfileRequirementCheckListResult_Result> FetchProfileRequirementCheckListResult(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfileRequirementCheckListResult_Result>("FetchProfileRequirementCheckListResult", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMemberDetail_Result> FetchMemberDetail(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberDetail_Result>("FetchMemberDetail", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchAcceptanceQuestionList_Result> FetchAcceptanceQuestionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAcceptanceQuestionList_Result>("FetchAcceptanceQuestionList");
        }
    
        public virtual ObjectResult<FetchAcceptanceCriteria_Result> FetchAcceptanceCriteria(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAcceptanceCriteria_Result>("FetchAcceptanceCriteria", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchInfoForPersonalProfileCard_Result> FetchInfoForPersonalProfileCard(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchInfoForPersonalProfileCard_Result>("FetchInfoForPersonalProfileCard", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMarriagePolicy_Result> FetchMarriagePolicy(Nullable<long> memberId, string option)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var optionParameter = option != null ?
                new ObjectParameter("option", option) :
                new ObjectParameter("option", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMarriagePolicy_Result>("FetchMarriagePolicy", memberIdParameter, optionParameter);
        }
    
        public virtual ObjectResult<FetchDucomentLisById_Result> FetchDucomentLisById(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDucomentLisById_Result>("FetchDucomentLisById", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchDocuments_Result> FetchDocuments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDocuments_Result>("FetchDocuments");
        }
    
        public virtual ObjectResult<FetchMemberList_Result> FetchMemberList(Nullable<int> pageindex, Nullable<int> pagesize, string search, string gender, Nullable<int> country, Nullable<int> relegion, string maritalStatus, Nullable<long> memberId)
        {
            var pageindexParameter = pageindex.HasValue ?
                new ObjectParameter("Pageindex", pageindex) :
                new ObjectParameter("Pageindex", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            var relegionParameter = relegion.HasValue ?
                new ObjectParameter("relegion", relegion) :
                new ObjectParameter("relegion", typeof(int));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("maritalStatus", maritalStatus) :
                new ObjectParameter("maritalStatus", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberList_Result>("FetchMemberList", pageindexParameter, pagesizeParameter, searchParameter, genderParameter, countryParameter, relegionParameter, maritalStatusParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<FetchWifeDetailByMemberId_Result> FetchWifeDetailByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchWifeDetailByMemberId_Result>("FetchWifeDetailByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchWifeKidsDetailByMemberId_Result> FetchWifeKidsDetailByMemberId(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchWifeKidsDetailByMemberId_Result>("FetchWifeKidsDetailByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<GetAllCRList_Result> GetAllCRList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCRList_Result>("GetAllCRList");
        }
    
        public virtual ObjectResult<GetCRList_ByTypeID_Result> GetCRList_ByTypeID(Nullable<long> listTypeID, string displayFor)
        {
            var listTypeIDParameter = listTypeID.HasValue ?
                new ObjectParameter("ListTypeID", listTypeID) :
                new ObjectParameter("ListTypeID", typeof(long));
    
            var displayForParameter = displayFor != null ?
                new ObjectParameter("DisplayFor", displayFor) :
                new ObjectParameter("DisplayFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRList_ByTypeID_Result>("GetCRList_ByTypeID", listTypeIDParameter, displayForParameter);
        }
    
        public virtual ObjectResult<FetchFacilities_Result> FetchFacilities(string facilityFor)
        {
            var facilityForParameter = facilityFor != null ?
                new ObjectParameter("facilityFor", facilityFor) :
                new ObjectParameter("facilityFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFacilities_Result>("FetchFacilities", facilityForParameter);
        }
    
        public virtual ObjectResult<FetchDivorcePolicy_Result> FetchDivorcePolicy(Nullable<long> memberId, string option)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var optionParameter = option != null ?
                new ObjectParameter("option", option) :
                new ObjectParameter("option", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDivorcePolicy_Result>("FetchDivorcePolicy", memberIdParameter, optionParameter);
        }
    
        public virtual ObjectResult<FetchProfileLocationDetail_Result> FetchProfileLocationDetail(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfileLocationDetail_Result>("FetchProfileLocationDetail", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchCities_Result> FetchCities(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCities_Result>("FetchCities", stateIdParameter);
        }
    
        public virtual ObjectResult<FetchStates_Result> FetchStates(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchStates_Result>("FetchStates", countryIdParameter);
        }
    
        public virtual ObjectResult<FetchProfilePersonalInfoDetail_Result> FetchProfilePersonalInfoDetail(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfilePersonalInfoDetail_Result>("FetchProfilePersonalInfoDetail", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchProfilePersonalInfo_Result> FetchProfilePersonalInfo(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfilePersonalInfo_Result>("FetchProfilePersonalInfo", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchProfilePersonalInfoForRegistrar_Result> FetchProfilePersonalInfoForRegistrar(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfilePersonalInfoForRegistrar_Result>("FetchProfilePersonalInfoForRegistrar", memberIdParameter);
        }
    
        public virtual ObjectResult<GetBestMatchingByCRList_Result> GetBestMatchingByCRList(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBestMatchingByCRList_Result>("GetBestMatchingByCRList", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMemberDetailById_Result> FetchMemberDetailById(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberDetailById_Result>("FetchMemberDetailById", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMyMatches_Result> FetchMyMatches(Nullable<int> pageindex, Nullable<int> pagesize, string search, string gender, Nullable<int> country, Nullable<int> stateID, Nullable<int> cityId, string relegionSect, string maritalStatus, Nullable<int> age, Nullable<int> language, string kidz, Nullable<int> income, string height, string weight, string complexion, Nullable<int> bodyType, Nullable<int> physicalStatus, Nullable<int> familyStatus, Nullable<int> familyValue, Nullable<int> eductionLevels, Nullable<int> employment, Nullable<long> memberId)
        {
            var pageindexParameter = pageindex.HasValue ?
                new ObjectParameter("Pageindex", pageindex) :
                new ObjectParameter("Pageindex", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var relegionSectParameter = relegionSect != null ?
                new ObjectParameter("relegionSect", relegionSect) :
                new ObjectParameter("relegionSect", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("maritalStatus", maritalStatus) :
                new ObjectParameter("maritalStatus", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(int));
    
            var kidzParameter = kidz != null ?
                new ObjectParameter("kidz", kidz) :
                new ObjectParameter("kidz", typeof(string));
    
            var incomeParameter = income.HasValue ?
                new ObjectParameter("income", income) :
                new ObjectParameter("income", typeof(int));
    
            var heightParameter = height != null ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(string));
    
            var complexionParameter = complexion != null ?
                new ObjectParameter("complexion", complexion) :
                new ObjectParameter("complexion", typeof(string));
    
            var bodyTypeParameter = bodyType.HasValue ?
                new ObjectParameter("BodyType", bodyType) :
                new ObjectParameter("BodyType", typeof(int));
    
            var physicalStatusParameter = physicalStatus.HasValue ?
                new ObjectParameter("PhysicalStatus", physicalStatus) :
                new ObjectParameter("PhysicalStatus", typeof(int));
    
            var familyStatusParameter = familyStatus.HasValue ?
                new ObjectParameter("FamilyStatus", familyStatus) :
                new ObjectParameter("FamilyStatus", typeof(int));
    
            var familyValueParameter = familyValue.HasValue ?
                new ObjectParameter("FamilyValue", familyValue) :
                new ObjectParameter("FamilyValue", typeof(int));
    
            var eductionLevelsParameter = eductionLevels.HasValue ?
                new ObjectParameter("EductionLevels", eductionLevels) :
                new ObjectParameter("EductionLevels", typeof(int));
    
            var employmentParameter = employment.HasValue ?
                new ObjectParameter("Employment", employment) :
                new ObjectParameter("Employment", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMyMatches_Result>("FetchMyMatches", pageindexParameter, pagesizeParameter, searchParameter, genderParameter, countryParameter, stateIDParameter, cityIdParameter, relegionSectParameter, maritalStatusParameter, ageParameter, languageParameter, kidzParameter, incomeParameter, heightParameter, weightParameter, complexionParameter, bodyTypeParameter, physicalStatusParameter, familyStatusParameter, familyValueParameter, eductionLevelsParameter, employmentParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMemberDetailById1_Result> FetchMemberDetailById1(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMemberDetailById1_Result>("FetchMemberDetailById1", memberIdParameter);
        }
    
        public virtual ObjectResult<FetchMyMatches1_Result> FetchMyMatches1(Nullable<int> pageindex, Nullable<int> pagesize, string search, string gender, Nullable<int> country, Nullable<int> stateID, Nullable<int> cityId, string relegionSect, string maritalStatus, Nullable<int> age, Nullable<int> language, string kidz, Nullable<int> income, string height, string weight, string complexion, Nullable<int> bodyType, Nullable<int> physicalStatus, Nullable<int> familyStatus, Nullable<int> familyValue, Nullable<int> eductionLevels, Nullable<int> employment, Nullable<long> memberId)
        {
            var pageindexParameter = pageindex.HasValue ?
                new ObjectParameter("Pageindex", pageindex) :
                new ObjectParameter("Pageindex", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var relegionSectParameter = relegionSect != null ?
                new ObjectParameter("relegionSect", relegionSect) :
                new ObjectParameter("relegionSect", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("maritalStatus", maritalStatus) :
                new ObjectParameter("maritalStatus", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(int));
    
            var kidzParameter = kidz != null ?
                new ObjectParameter("kidz", kidz) :
                new ObjectParameter("kidz", typeof(string));
    
            var incomeParameter = income.HasValue ?
                new ObjectParameter("income", income) :
                new ObjectParameter("income", typeof(int));
    
            var heightParameter = height != null ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(string));
    
            var complexionParameter = complexion != null ?
                new ObjectParameter("complexion", complexion) :
                new ObjectParameter("complexion", typeof(string));
    
            var bodyTypeParameter = bodyType.HasValue ?
                new ObjectParameter("BodyType", bodyType) :
                new ObjectParameter("BodyType", typeof(int));
    
            var physicalStatusParameter = physicalStatus.HasValue ?
                new ObjectParameter("PhysicalStatus", physicalStatus) :
                new ObjectParameter("PhysicalStatus", typeof(int));
    
            var familyStatusParameter = familyStatus.HasValue ?
                new ObjectParameter("FamilyStatus", familyStatus) :
                new ObjectParameter("FamilyStatus", typeof(int));
    
            var familyValueParameter = familyValue.HasValue ?
                new ObjectParameter("FamilyValue", familyValue) :
                new ObjectParameter("FamilyValue", typeof(int));
    
            var eductionLevelsParameter = eductionLevels.HasValue ?
                new ObjectParameter("EductionLevels", eductionLevels) :
                new ObjectParameter("EductionLevels", typeof(int));
    
            var employmentParameter = employment.HasValue ?
                new ObjectParameter("Employment", employment) :
                new ObjectParameter("Employment", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchMyMatches1_Result>("FetchMyMatches1", pageindexParameter, pagesizeParameter, searchParameter, genderParameter, countryParameter, stateIDParameter, cityIdParameter, relegionSectParameter, maritalStatusParameter, ageParameter, languageParameter, kidzParameter, incomeParameter, heightParameter, weightParameter, complexionParameter, bodyTypeParameter, physicalStatusParameter, familyStatusParameter, familyValueParameter, eductionLevelsParameter, employmentParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<FetchProfilePersonalInfoForRegistrar1_Result> FetchProfilePersonalInfoForRegistrar1(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProfilePersonalInfoForRegistrar1_Result>("FetchProfilePersonalInfoForRegistrar1", memberIdParameter);
        }
    
        public virtual ObjectResult<GetBestMatchingByCRList1_Result> GetBestMatchingByCRList1(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBestMatchingByCRList1_Result>("GetBestMatchingByCRList1", memberIdParameter);
        }
    }
}
